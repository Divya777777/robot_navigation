# Updated navigation parameters that work with robot_localization EKF

amcl:
  ros__parameters:
    use_sim_time: True
    
    # ✅ CRITICAL: With IMU fusion, we can reduce AMCL's motion model noise
    alpha1: 0.05    # Much lower - IMU handles rotation noise
    alpha2: 0.1     # Lower - better odometry with IMU
    alpha3: 0.08    # Moderate translation noise
    alpha4: 0.03    # Lower - IMU provides better rotation estimates
    alpha5: 0.01    # Keep very low
    
    base_frame_id: "diff_drive/chassis"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 120
    
    # ✅ FEWER PARTICLES: EKF provides better odometry, so we need fewer particles
    max_particles: 3000    # Reduced significantly
    min_particles: 800     # Reduced significantly
    
    # ✅ CRITICAL: Use EKF-filtered odometry instead of raw wheel odometry
    odom_frame_id: "/diff_drive/odometry/filtered"
    
    pf_err: 0.08          # Increased - we trust EKF more than particles
    pf_z: 0.99
    recovery_alpha_fast: 0.05
    recovery_alpha_slow: 0.0005
    resample_interval: 3         # Less frequent - EKF handles fast updates
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.1              # Tighter - better localization expected
    tf_broadcast: true
    tf_buffer_duration': 10.0
    # ✅ SMALLER TOLERANCE: EKF should provide better transforms
    transform_tolerance: 1.0    # Reduced with IMU
    
    # ✅ LESS AGGRESSIVE UPDATES: EKF handles the fast corrections
    update_min_a: 0.1     # Less sensitive with IMU
    update_min_d: 0.1     # Less sensitive with IMU
    
    z_hit: 0.85           # Higher confidence in measurements
    z_max: 0.02
    z_rand: 0.1           # Lower random noise
    z_short: 0.05
    scan_topic: /diff_drive/scan
    first_map_only: false
    use_map_topic: true

# ✅ CRITICAL: Update controller to use EKF odometry
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.8
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]
    
    # ✅ IMPORTANT: Use filtered odometry topic
    odom_topic: "/diff_drive/odometry/filtered"  # EKF output instead of raw

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.3   # Can be tighter with IMU
      movement_time_allowance: 12.0

    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5      # Tighter with better localization
      yaw_goal_tolerance: 0.2

    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: False
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.6            # Can be slightly faster with IMU
      max_vel_y: 0.0
      max_vel_theta: 0.4        # Still conservative
      
      min_speed_xy: 0.0
      max_speed_xy: 0.6
      min_speed_theta: 0.0
      
      # ✅ BALANCED: Can be less conservative with IMU feedback
      acc_lim_x: 0.8           # Slightly faster acceleration
      acc_lim_y: 0.0
      acc_lim_theta: 0.5       # Faster angular acceleration with IMU
      
      decel_lim_x: -1.0
      decel_lim_y: 0.0
      decel_lim_theta: -0.8
      
      vx_samples: 10
      vy_samples: 1
      vtheta_samples: 20       # More samples for precision
      sim_time: 2.0            # Shorter with better prediction
      linear_granularity: 0.05
      angular_granularity: 0.025
      
      transform_tolerance: 0.2  # Tighter with IMU
      
      xy_goal_tolerance: 0.5
      trans_stopped_velocity: 0.05
      short_circuit_trajectory_evaluation: True
      stateful: True
      
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      
      BaseObstacle.scale: 0.02
      PathAlign.scale: 15.0      # Higher weight - better tracking
      PathAlign.forward_point_distance: 0.25
      GoalAlign.scale: 8.0
      GoalAlign.forward_point_distance: 0.25
      PathDist.scale: 12.0
      GoalDist.scale: 18.0
      RotateToGoal.scale: 8.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
      Oscillation.scale: 0.0

# ✅ UPDATE: Costmaps also use filtered odometry
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 15.0
      publish_frequency: 10.0
      global_frame: diff_drive/odom    # This stays as odom frame
      robot_base_frame: diff_drive/chassis
      use_sim_time: True
      rolling_window: true
      width: 6
      height: 6
      resolution: 0.08           # Slightly coarser with better localization
      robot_radius: 0.65         # Can be less conservative
      
      transform_tolerance: 0.3   # Tighter with IMU
      
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.8
        inflation_radius: 0.647
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan depth_camera
        scan:
          topic: /diff_drive/scan
          sensor_frame: diff_drive/lidar_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
        depth_camera:
          topic: /filtered_points
          sensor_frame: diff_drive/depth_camera_link
          max_obstacle_height: 5.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
      always_send_full_costmap: true

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 3.0
      global_frame: map
      robot_base_frame: diff_drive/chassis
      use_sim_time: True
      robot_radius: 0.65
      resolution: 0.05
      track_unknown_space: true
      rolling_window: false
      width: 2000
      height: 2000
      transform_tolerance: 0.3   # Tighter with IMU
      
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan depth_camera
        scan:
          topic: /diff_drive/scan
          sensor_frame: diff_drive/lidar_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
        depth_camera:
          topic: /filtered_points
          sensor_frame: diff_drive/depth_camera_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 1.0
      always_send_full_costmap: True

# ✅ UPDATED: Velocity smoother with IMU-aware parameters
velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 30.0   # Still high but not excessive
    scale_velocities: False
    feedback: "OPEN_LOOP"
    
    # ✅ LESS CONSERVATIVE: IMU provides better slip detection
    max_velocity: [0.6, 0.0, 0.4]    # Can be faster with IMU
    min_velocity: [0.0, 0.0, -0.4]
    max_accel: [0.8, 0.0, 0.5]       # Faster acceleration with IMU
    max_decel: [-1.0, 0.0, -0.8]
    
    topic: "cmd_vel"
    smoothed_vel_topic: "diff_drive/cmd_vel"
    
    # ✅ CRITICAL: Use filtered odometry for velocity feedback
    odom_topic: "/diff_drive/odometry/filtered"
    
    odom_duration: 0.1
    deadband_velocity: [0.01, 0.0, 0.01]
    velocity_timeout: 1.0

# Keep other parameters the same...
bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: diff_drive/chassis
    
    # ✅ IMPORTANT: Use filtered odometry
    odom_topic: /diff_drive/odometry/filtered
    
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node
    - nav2_is_battery_charging_condition_bt_node

# Keep remaining parameters the same as original
map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true
      downsample_costmap: false
      downsampling_factor: 1
      cost_travel_multiplier: 1.2
      smooth_path: True

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-8
      max_its: 1500
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 15.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: diff_drive/odom
    robot_base_frame: diff_drive/chassis
    transform_tolerance: 0.3
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.4
    min_rotational_vel: 0.1
    rotational_acc_lim: 0.8

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: True
    
#     # ✅ MAXIMUM: Highest frequency for slip mitigation
#     smoothing_frequency: 30.0   # Increased from 20.0
    
#     scale_velocities: False
#     feedback: "OPEN_LOOP"
    
#     # ✅ ULTRA CONSERVATIVE: Very slow speeds
#     max_velocity: [0.8, 0.0, 0.4]    # Further reduced
#     min_velocity: [-0.0, 0.0, -0.4]
#     max_accel: [1.5, 0.0, 0.8]       # Very gentle acceleration
#     max_decel: [-1.5, 0.0, -1.5]     # Very gentle deceleration
    
#     topic: "cmd_vel"
#     smoothed_vel_topic: "diff_drive/cmd_vel"
#     odom_topic: "diff_drive/odom"
#     odom_duration: 0.15         # Longer history for smoothing
#     deadband_velocity: [0.0, 0.0, 0.0]
#     velocity_timeout: 1.5       # Longer timeout

docking_server:
  ros__parameters:
    docking_pose: [-13.91, -4.36, 0.677]  # [x, y, yaw]
    docking_tolerance: 0.5  # meters
    approach_distance: 0.5  # meters
    undock_distance: 2.0  # meters to move backward during undock